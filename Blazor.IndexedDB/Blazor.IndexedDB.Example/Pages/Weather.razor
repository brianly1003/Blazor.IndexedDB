@page "/weather"
@using Blazor.IndexedDB.Example.Models

@inject IIndexedDbFactory DbFactory
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.Create<ExampleDb>();
        var localForecasts = db.WeatherForecasts.ToArray();
        if (localForecasts.Length == 0)
        {
            var remoteForecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
            if (remoteForecasts != null)
            {
                db.WeatherForecasts.AddRange(remoteForecasts);
                await db.SaveChanges();
            }

            _forecasts = db.WeatherForecasts.ToArray();
        }
        else
        {
            _forecasts = localForecasts;
        }
    }
}
