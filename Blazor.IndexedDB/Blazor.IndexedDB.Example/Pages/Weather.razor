@page "/weather"
@using Blazor.IndexedDB.Example.Models

@inject IIndexedDbFactory DbFactory
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<button class="btn btn-primary" @onclick="FetchData">Fetch Data</button>
<button class="btn btn-primary" @onclick="RemoveAll">Remove All</button>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        using var db = await DbFactory.Create<ExampleDb>();
        _forecasts = db.WeatherForecasts.ToArray();
    }

    private async Task FetchData()
    {
        using var db = await DbFactory.Create<ExampleDb>();
        var remoteForecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        if (remoteForecasts != null)
        {
            db.WeatherForecasts.AddRange(remoteForecasts);
            await db.SaveChanges();
        }

        _forecasts = db.WeatherForecasts.ToArray();
    }

    private async Task RemoveAll()
    {
        using var db = await DbFactory.Create<ExampleDb>();
        db.WeatherForecasts.RemoveRange(db.WeatherForecasts.ToArray());
        await db.SaveChanges();

        _forecasts = Array.Empty<WeatherForecast>();
    }
}
